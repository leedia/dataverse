<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:p="http://primefaces.org/ui">

    <h:head>
    </h:head>

    <h:body>
        <f:metadata>
            
        </f:metadata>
        <ui:composition template="/dataverse_template.xhtml">
            <ui:param name="pageTitle" value="Provenance - #{dataverseServiceBean.findRootDataverse().name} #{bundle.dataverse}"/>
            <ui:param name="showDataverseHeader" value="false"/>
            <ui:param name="loginRedirectPage" value="dataverse.xhtml"/>
            <ui:param name="showMessagePanel" value="#{true}"/>
            <ui:define name="body">
                <select onchange = "refresh(this)">
                    <option value="">Select an Edge Type</option>
                    <option value="input">Input</option>
                    <option value="translation">Translation</option>
                    <option value="copy">Copy</option>
                </select>
                
                <style type ="text/css" id = "d3style">
                    .node {
                        cursor: pointer;
                    }

                    .node circle {
                        fill: #fff;
                        stroke: #8F0000;
                        stroke-width: 3px;
                    }

                    .node text {
                        font: 12px sans-serif;
                    }

                    .link {
                        fill: none;
                        /*stroke: #ccc;*/
                        stroke-width: 2px;
                    }
                    
                    
                    div.tooltip {	
                        position: absolute;			
                        text-align: center;			
                        width: 70px;					
                        height: 60px;					
                        padding: 2px;				
                        font: 12px sans-serif;		
                        background: #CB9797;	
                        border: 0px;		
                        border-radius: 8px;			
                        pointer-events: none;			
                    }


                </style>                   
                
                <script type="text/javascript" src="#{resource['js/d3.min.js']}"></script>
                <script type = "text/javascript" id = "d3script">
                    
                    /*function getJavaArray() {
                        var arrayFromJava = document.TestApplet.getJavaArray();

                        alert("Java Array length = " + arrayFromJava.length + "\r\n" +
                              "element 2 is " + arrayFromJava[1]);
                    }*/
                    
                    //console.log("#{ProvenanceGraph.getNames()}");
                    console.log("test");
                    console.log("#{dataverseServiceBean.isRootDataverseExists()}");
                    
                    var test = "#{dataverseServiceBean.findAll()}";
                    console.log(test);
                    console.log(test[0]);
                    console.log(test[2][0]);
                    console.log(test.charAt(0));
                    
                    var inputcol = "red";
                    var translationcol = "green";
                    var copycol = "#ccc";
                    
                    
                    //initial data
                    var data = [
                        {"name":"Root", "parent":"null", "data":"1", "group": ""},
                        {"name":"Dataverse 1", "parent":"Root", "data":"2", "group":"input"},
                        {"name":"Dataverse 2", "parent":"Root", "data":"3", "group":"translation"},
                        {"name":"Dataset 1", "parent": "Dataverse 2", "data":"4", "group":"copy"},
                        {"name":"Dataset 2", "parent": "Dataverse 2", "data":"5","group":"copy"}
                    ];
                    
                    //create treeData
                    
                    var dataMap = data.reduce(function(map, node) {
                        map[node.name] = node;
                        return map;
                    }, {});

                    // create the tree array
                    var treeData = [];
                    data.forEach(function(node) {
                        // add to parent
                        var parent = dataMap[node.parent];
                        if (parent) {
                            // create child array if it doesn't exist
                            (parent.children || (parent.children = []))
                                // add node to child array
                                .push(node);
                        } else {
                            // parent is null or missing
                            treeData.push(node);
                        }
                    });


                    // ************** Generate the tree diagram	 *****************
                    var margin = {top: 20, right: 120, bottom: 20, left: 120},
                        width = 960 - margin.right - margin.left,
                        height = 500 - margin.top - margin.bottom;

                    var i = 0,
                        duration = 750,
                        root;

                    var tree = d3.layout.tree()
                        .size([height, width]);

                    var diagonal = d3.svg.diagonal()
                        .projection(function(d) { return [d.y, d.x]; });

                    var svg = d3.select("body").append("svg")
                        .attr("width", width + margin.right + margin.left)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    root = treeData[0];
                    root.x0 = height / 2;
                    root.y0 = 0;
                    
                    //data
                    function collapse(d) {
                        if (d.children) {
                            d._children = d.children;
                            d._children.forEach(collapse);
                            d.children = null;
                        }
                    }

                    update(root);
                    d3.select(self.frameElement).style("height", "500px");

                    function refresh(select) {
                          console.log(select.value);
                          if(select.value === "input") {
                              inputcol = "red";
                              translationcol = "white";
                              copycol = "white";
                          }
                          else if(select.value === "translation") {
                              translationcol = "green"; 
                              inputcol = "white";
                              copycol = "white";
                          }
                          else if (select.value === "copy") {
                              copycol = "#ccc";
                              inputcol = "white";
                              translationcol = "white";
                          }
                          update(root);
                          console.log(inputcol + ", " + translationcol + ", " + copycol);
                          
                          data.forEach(function(node) {
                                update(node);
                            });
                      }
                      
                      function refreshEdges(d) {
                          console.log("hi");
                          inputcol = "white";
                          update(d);
                      }

                    function update(source) {

                        // Compute the new tree layout.
                        var nodes = tree.nodes(root).reverse(),
                            links = tree.links(nodes);

                        // Normalize for fixed-depth.
                        nodes.forEach(function(d) { d.y = d.depth * 180; });

                        // Update the nodesâ€¦
                        var node = svg.selectAll("g.node")
                            .data(nodes, function(d) { return d.id || (d.id = ++i); });
                    
                    
                         
                        // Define the div for the tooltip
                        var div = d3.select("body").append("div")	
                            .attr("class", "tooltip")				
                            .style("opacity", 0);
    
    

                        // Enter any new nodes at the parent's previous position.
                        var nodeEnter = node.enter().append("g")
                                .attr("class", "node")
                                .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                                .on("click", click)
                                /*.on("mouseover", function(d) {
                                    var g = d3.select(this); // The node
                                    // The class is used to remove the additional text later
                                    var info = g.append('text')
                                       .classed('info', true)
                                       .attr('x', 20)
                                       .attr('y', 50)
                                       .text('More info');
                                })
                                /*.on("mouseout", function() {
                                    // Remove the info text on mouse out.
                                    d3.select(this).select('text.info').remove();*/
                                .on("mouseover", function(d) {		
                                    div.transition()		
                                        .duration(200)		
                                        .style("opacity", .9);		
                                    div	.html("<b>Name: </b>" + d.name + "<br/>" + "<b>Data: </b>"  + d.data)	
                                        .style("left", (d3.event.pageX) + "px")		
                                        .style("top", (d3.event.pageY - 60) + "px");	
                                    })					
                                .on("mouseout", function(d) {		
                                    div.transition()		
                                        .duration(500)		
                                        .style("opacity", 0);	
                                });

                        nodeEnter.append("circle")
                                .attr("r", 1e-6)
                                .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

                        nodeEnter.append("text")
                                .attr("x", function(d) { return d.children || d._children ? -13 : 13; })
                                .attr("dy", ".35em")
                                .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
                                .text(function(d) { return d.name; })
                                .style("fill-opacity", 1e-6);

                        // Transition nodes to their new position.
                        var nodeUpdate = node.transition()
                                .duration(duration)
                                .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

                        nodeUpdate.select("circle")
                                .attr("r", 10)
                                .style("fill", function(d) { return d._children ? "#B14D4D" : "#fff"; });

                        nodeUpdate.select("text")
                                .style("fill-opacity", 1);

                        // Transition exiting nodes to the parent's new position.
                        var nodeExit = node.exit().transition()
                                .duration(duration)
                                .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                                .remove();

                        nodeExit.select("circle")
                                .attr("r", 1e-6);

                        nodeExit.select("text")
                                .style("fill-opacity", 1e-6);

                        // Update the linksâ€¦
                        var link = svg.selectAll("path.link")
                                .data(links, function(d) { return d.target.id; })
                                //.style("stroke", function(d) { return "blue"; });


                        // Enter any new links at the parent's previous position.
                        link.enter().insert("path", "g")
                                .attr("class", "link")
                                .attr("d", function(d) {
                                    var o = {x: source.x0, y: source.y0};
                                    return diagonal({source: o, target: o});
                                })
                                .style("stroke", function(d) { 
                                    if(d.target.group === "input") {
                                        return inputcol;
                                    }
                                    else if (d.target.group === "translation") {
                                        return translationcol;
                                    }
                                    else {
                                        return copycol;
                                    }
                                    

                                });;

                        // Transition links to their new position.
                        link.transition()
                                .duration(duration)
                                .attr("d", diagonal);

                        // Transition exiting nodes to the parent's new position.
                        link.exit().transition()
                                .duration(duration)
                                .attr("d", function(d) {
                                    var o = {x: source.x, y: source.y};
                                    return diagonal({source: o, target: o});
                                })
                                .remove();

                        // Stash the old positions for transition.
                        nodes.forEach(function(d) {
                              d.x0 = d.x;
                              d.y0 = d.y;
                        });
                      }

                      // Toggle children on click.
                      function click(d) {
                        if (d.children) {
                              d._children = d.children;
                              d.children = null;
                        } else {
                              d.children = d._children;
                              d._children = null;
                        }
                        update(d);
                      }
                      
                      

                </script>
            </ui:define>
        </ui:composition>
    </h:body>
</html>
